
# ----------------------------------------------------------
# Conventional commit format
# ----------------------------------------------------------
# <type>[(optional scope)][!]: <description>
# <blank line>
# [optional body]
# <blank line>
# [optional footer(s)]
# [BREAKING CHANGE: (if applicable)]
# ----------------------------------------------------------
# types: 
# - build, ci, docs, feat, fix, perf, refactor, style, test
# ----------------------------------------------------------
# Available types:
# - build: Changes that affect the build system or external
#     dependencies
# - ci: Changes to CI configuration file, scripts
# - docs: Documentation only changes
# - feat: A new feature
# - fix: A bug fix
# - perf: A code change that improves performance
# - refactor: A code change that neither fixes a bug nor
#     adds a feature
# - style: Changes that do not affect the meaning of the
#     code (white-space, formatting, etc)
# - test: Adding missing tests or correcting existing tests
# ----------------------------------------------------------
# Full specification available at:
#     https://www.conventionalcommits.org/en/v1.0.0/
# ----------------------------------------------------------
# fix: a commit of the type fix patches a bug in your
#   codebase (this correlates with PATCH in Semantic
#   Versioning)
# feat: a commit of the type feat introduces a new feature 
#   to the codebase (this correlates with MINOR in Semantic
#   Versioning).
# BREAKING CHANGE: a commit that has a footer 
#      BREAKING CHANGE:
#   or appends a ! after the type/scope, introduces a
#   breaking API change (correlating with MAJOR in Semantic
#   Versioning). A BREAKING CHANGE can be part of commits
#   of any type.
# ----------------------------------------------------------
# Body:
# - Explain *what* and *why* (not *how*)
# Footer:
# - Explain relevant IDs (Issues, PR, Jira, etc.)
