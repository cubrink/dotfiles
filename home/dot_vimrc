""""""""""""""""""""
" Begin plug-ins
""""""""""""""""""""

" Auto-install
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" Check for missing plugins and show detailed help
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| echohl WarningMsg | echo "Some plugins are missing!"
  \| echohl None | echo "Missing plugins - run `:PlugInstall` to install"
\| endif


" Load plug-ins
call plug#begin('~/.vim/plugged')

"""""""" General
" Fuzzy file finder - :Lines, :Files, :Buffers, :Rg to search, Ctrl-P for files
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Toggle comments with gcc (line) or gc (visual selection)
Plug 'tpope/vim-commentary'

" Jump to 2-char sequence - s<char><char> (forward), S<char><char> (backward), ; and , to repeat
Plug 'justinmk/vim-sneak'

" Jump to any visible character - <Leader><Leader>s<char> then type the label shown
Plug 'easymotion/vim-easymotion'

" Change/delete surroundings - cs"' (change quotes), ds( (delete parens), ysiw" (surround word)
Plug 'tpope/vim-surround'

" Auto-close brackets, quotes, parens as you type
Plug 'jiangmiao/auto-pairs'

" File tree explorer - :NERDTreeToggle to open/close, o to open files, m for menu (add/delete files), mapped to <Leader>n
Plug 'preservim/nerdtree'

"""""""" Languages
"" Rust
Plug 'rust-lang/rust.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'

" Themes
Plug 'joshdick/onedark.vim'

call plug#end()

""""""""""""""""""""
" End plug-ins
""""""""""""""""""""
" Begin user config
""""""""""""""""""""

set nu

let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0

let g:sneak#label = 1

map <Leader>n :NERDTreeToggle<CR>

colorscheme onedark

""""""""""""""""""""
" End user config
""""""""""""""""""""
" Begin CoC Config
""""""""""""""""""""
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

""""""""""""""""""""
" End CoC Config
""""""""""""""""""""
" Begin Color Config
""""""""""""""""""""
augroup PopupColors
  autocmd!
  " This is the color of the highlighted line
  " fg is the color of the unhighlighted text
  autocmd VimEnter * highlight PmenuSel ctermbg=234 ctermfg=248
  " This is the color of the unselected lines
 autocmd VimEnter * highlight CocFloating ctermbg=237 ctermfg=250
  " This is the color of the matching text
  " autocmd VimEnter * highlight CocSearch ctermfg=29 guifg=#61afef
  autocmd VimEnter * highlight CocSearch ctermfg=30
augroup END
